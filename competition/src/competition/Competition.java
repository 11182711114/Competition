package competition;

import java.util.ArrayList;
import java.util.Scanner;
/*
 * TODO;
 * 	high priority
 * 		team()
 * 		participant()
 * 	med priority
 * 		clean code
 * 	low priority
 * 		read from file
 */
public class Competition {
	private static final int MESSAGE_ABSOLUTE_NUMBER_CHARS_PER_LINE = 60;
	
	private Database db;
	private EventHandler eventHandler;
	
	private ArrayList<Participant> participants = new ArrayList<Participant>();
	private int nrOfRemoved = 0;
	
	
	public static void main(String[] args){
		Competition thisCompetition = new Competition();
		thisCompetition.initialize(thisCompetition);
		thisCompetition.run();	
		thisCompetition.exit();
	}
	//main functions
	private void initialize(Competition c){
		db = new Database(c);
		eventHandler = new EventHandler(c);
	}
	private void run(){
		menu();
		while(handleCommands(readCommand())){
		}
						
	}
	private void exit(){
		saveDb();
	}
	//database functions
	private void saveDb(){
		if(db.databaseSelected()){
			db.writeToFile(eventHandler.getAllEvents(), participants);
		}
	}
	private void loadDb(){
		if(!db.databaseSelected()){
			db.setDatabase();
		}
		if(db.databaseExists()){
			ArrayList<Participant> parts = db.getParticipantsFromDb();
			if(!parts.isEmpty()){
				for(Participant p : parts){
					participants.add(new Participant(p.getName(),p.getFamilyName(),p.getTeamName(),p.getID(),this));
				}
			}
			ArrayList<Event> events = db.getEventsFromDb();
			if(!events.isEmpty()){
				for(Event e : events){
					eventHandler.addEvent(e.getName(),e.getTries(),e.getBiggerBetter());
					for(Result r : e.getResults()){
						eventHandler.getEventByName(e.getName()).addResult(r);
					}
				}
			}
		}
		else{
			System.out.println("New database, nothing to load");
		}
	}
	//run functions
	private String readCommand(){
		return normalize(inputString("Listening:"),2);
	}
	private boolean handleCommands(String userInput){
		if(userInput.equals("load")){
			loadDb();
		}
		else if(userInput.equals("add event")){
			eventHandler.addEvent();
		}			
		else if(userInput.equals("add participant")){
			addParticipant(this);
		}
		else if(userInput.equals("remove participant")){
			removeParticipant();
		}
		else if(userInput.equals("list participants")){
			listParticipants();
		}
		else if(userInput.equals("add result")){
			eventHandler.addResult();								
		}
		else if(userInput.equals("participant")){
			eventHandler.printResultByParticipant();
		}			
		else if(userInput.equals("teams")){
			eventHandler.printMedals();
		}
		else if(userInput.contains("message")){
			message(userInput);
		}
		else if(userInput.equals("reinitialize")){
			reinitialize();				
		}
		else if(userInput.equals("exit")){
			return false;
		}
		else{				
			boolean wrongInput = true;
			for(Event thisEvent : eventHandler.getAllEvents()){
				if(thisEvent.getName().equalsIgnoreCase(userInput)){
					wrongInput = false;
					eventHandler.printResultByEvent(userInput);
				}										
			}
			if(wrongInput){
				System.out.println("Error 00; wrong input given");
				menu();
			}
		}
		return true;	
	}	
	private void menu(){
		System.out.println("Availible options, non case-sensitive;");
		System.out.println("\"load\" - selects database to get information from and save to");
		System.out.println("\"add event\" - adds an event with given options");
		System.out.println("\"add participant\" - adds a participant and gives them an autogenerated ID");
		System.out.println("\"remove participant\" - removes a participant by ID");
		System.out.println("\"list participants\" - lists all participants");
		System.out.println("\"add result\" - adds a result for a participant, by ID, for a specific event, by name");
		System.out.println("$eventName - shows the result for given event");
	}
	//program functions
		//basic functions
	private void reinitialize(){
		//Reset nrOfRemoved, go through all of the ArrayLists and erase everything
		nrOfRemoved=0;
		
		eventHandler.reinitialize();
		participants.clear();
	}
	private void message(String s){
		//make new Message, start after "message "
		Message message = new Message(s.substring(8));
		message.printInBoxOfStars(MESSAGE_ABSOLUTE_NUMBER_CHARS_PER_LINE);
	}
			//public functions
	public String inputString(String outputGuideString){
		@SuppressWarnings("resource")
		Scanner tangentbord = new Scanner(System.in);
		System.out.print(outputGuideString);
		return tangentbord.nextLine();		
	}
	public Double inputNumber(String outputGuideString){		
		@SuppressWarnings("resource")
		Scanner tangentbord = new Scanner(System.in);
		System.out.print(outputGuideString);
		String dOutput = tangentbord.nextLine();
		if(isNumber(dOutput)){
			return Double.parseDouble(dOutput);
		}
		else{
			do{
				System.out.println(dOutput +" is not a number!");
				System.out.print(outputGuideString);
				dOutput = tangentbord.nextLine();
			}while(!isNumber(dOutput));
			return Double.parseDouble(dOutput);
		}
	}
	/*
	 *remove forbidden character, could use .trim() for whitespace only but
	 *	1. this is more powerful for future additions
	 *	2. because I didn't check the docs before doing it 
	 *	3. then got obsessed with making it work and justifiable
	 *
	 *it will remove all forbidden characters
	 *leave whitespace if it has characters next to it, e.g. "Boo FF"
	 *
	 *int c;
	 *0 = do nothing
	 *1 = force capitalization
	 *2 = force all lowercase
	*/
	public String normalize(String x, int c){
		String output = null;
		String[] forbidden = {" "};
		//iterate through the given string		
		for(int i=0; i<x.length(); i++){
			String l = x.substring(i,i+1);
			//iterate through the forbidden list
			for(int y = 0; y<forbidden.length;y++){
				if(!l.equalsIgnoreCase(forbidden[y])){
					//check if output is null
					
					if(output!=null){
						output=output+l;
					}
					else{
						output=l;						
						}					
				}
				//if it is a whitespace check if it has characters next to it
				if(l.equals(" ")){
					//check if it's the first or last character, if it is then it is incorrect anyways, if it's not we can check
					if(i>0 && i<x.length()-1){						
						if(!x.substring(i-1,i).equals(" ") && !x.substring(i+1,i+2).equals(" ")){
							output+=l;							
						}
					}															
				}
			}
		}
		//check if we trimmed the entire string
		if(output.isEmpty()){
			return null;
		}
		else{
			//first letter to uppercase	
			if(c == 1){
				return output.substring(0, 1).toUpperCase()+output.substring(1).toLowerCase();
			}
			else if(c == 2){
				return output.toLowerCase();
			}
			return output;			
		}		
	}
	public ArrayList<Participant> getParticipants(){
		return participants;
	}
		//participant functions
	private void addParticipant(Competition c){
		String gName = normalize(inputString("Participants given name:"),1);
		String fName = normalize(inputString("Participants family name:"),1);
		String tName = normalize(inputString("Participants team name:"),1);
		
		if(gName != null && fName != null && tName != null){
			int ID = 100;		
			if(!participants.isEmpty()){
				ID = 1+participants.get(participants.size()-1).getID();
			}
			Participant newParticipant = new Participant(gName,fName,tName,ID,c);
			participants.add(newParticipant);
			newParticipant.addParticipantToTeam();
			System.out.println(participants.get(ID-100-nrOfRemoved)+" added");
		}
		else{
			System.out.println("Error 05; null value in add participant");
			}
	}
	private void removeParticipant(){
		int removedID = inputNumber("Participant ID to be removed:").intValue();
		
		int i = 0;				
		for(Participant p: participants){
			if(p.getID()==(removedID)){
				break;
			}
			i++;
		}
		if(i>=0 && i<participants.size()){
			System.out.println("Removing: "+ participants.get(i));
			Participant p = participants.get(i);
			participants.remove(i);
			p.getTeam().removeParticipant(p);
			nrOfRemoved++;
		}
		else{
			System.out.println("Error 06: No participant with ID: "+removedID);										
		}
	}
	private void listParticipants(){
		for(Participant p : participants){
			System.out.println(p.toString());
		}
	}
			//public functions
	public Participant getParticipantByID(int id){
		for(Participant p : participants){
			if(p.getID() == id){
				return p;
			}
		}
		return null;
	}
	public boolean doesParticipantExist(int id){
		for(Participant p : participants){
			if(p.getID() == id){
				return true;
			}
		}
		return false;
	}
	public boolean isNumber(String s){
		try{
			Double.parseDouble(s);
		}catch(Exception e){
			return false;
		}
		return true;
	}
}