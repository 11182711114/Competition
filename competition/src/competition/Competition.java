package competition;

import java.util.ArrayList;
import java.util.Scanner;
/*
 * TODO;
 * 	high priority
 * 		team()
 * 		participant()
 * 	med priority
 * 		clean code
 * 	low priority
 * 		read from file
 */
public class Competition {
	private static final int MESSAGE_ABSOLUTE_NUMBER_CHARS_PER_LINE = 60;
	private static final char[] NORMALIZE_FORBIDDEN_CHARACTERS = {' '};
	
	private Database db;
	private EventHandler eventHandler;
	
	private ArrayList<Participant> participants = new ArrayList<Participant>();
	private int nrOfRemoved = 0;
	
	
	public static void main(String[] args){
		Competition thisCompetition = new Competition();
		thisCompetition.initialize(thisCompetition);
		thisCompetition.run();	
		thisCompetition.exit();
	}
	//main functions
	private void initialize(Competition c){
		db = new Database(c);
		eventHandler = new EventHandler(c);
	}
	private void run(){
		menu();
		while(handleCommands(readCommand())){
		}
						
	}
	private void exit(){
		saveDb();
	}
	//database functions
	private void saveDb(){
		if(db.databaseSelected()){
			db.writeToFile(eventHandler.getAllEvents(), participants);
		}
	}
	private void loadDb(){
		if(!db.databaseSelected()){
			db.setDatabase();
		}
		if(db.databaseExists()){
			ArrayList<Participant> parts = db.getParticipantsFromDb();
			if(!parts.isEmpty()){
				for(Participant p : parts){
					participants.add(new Participant(p.getName(),p.getFamilyName(),p.getTeamName(),p.getID(),this));
				}
			}
			ArrayList<Event> events = db.getEventsFromDb();
			if(!events.isEmpty()){
				for(Event e : events){
					eventHandler.addEvent(e.getName(),e.getTries(),e.getBiggerBetter());
					for(Result r : e.getResults()){
						eventHandler.getEventByName(e.getName()).addResult(r);
					}
				}
			}
		}
		else{
			System.out.println("New database, nothing to load");
		}
	}
	//run functions
	private String readCommand(){
		return normalize(inputString("Listening:"),2);
	}
	private boolean handleCommands(String userInput){
		if(userInput.equals("load")){
			loadDb();
		}
		else if(userInput.equals("menu")){
			menu();
		}
		else if(userInput.equals("add event")){
			eventHandler.addEvent();
		}			
		else if(userInput.equals("add participant")){
			addParticipant(this);
		}
		else if(userInput.equals("remove participant")){
			removeParticipant();
		}
		else if(userInput.equals("list participants")){
			listParticipants();
		}
		else if(userInput.equals("add result")){
			eventHandler.addResult();								
		}
		else if(userInput.equals("participant")){
			eventHandler.printResultByParticipant();
		}			
		else if(userInput.equals("teams")){
			eventHandler.printMedals();
		}
		else if(userInput.contains("message")){
			message(userInput);
		}
		else if(userInput.equals("reinitialize")){
			reinitialize();				
		}
		else if(userInput.equals("exit")){
			return false;
		}
		else{
			if(eventHandler.doesEventExist(userInput)){
				eventHandler.printResultByEvent(userInput);
			}
			else{
				System.out.println("Error 00; wrong input given");
				System.out.println("Use \"menu\" to see available commands");
			}
		}
		return true;	
	}	
	private void menu(){
		System.out.println("Availible options, non case-sensitive;");
		System.out.println("\"load\" - selects database to get information from and save to");
		System.out.println("\"add event\" - adds an event with given options");
		System.out.println("\"add participant\" - adds a participant and gives them an autogenerated ID");
		System.out.println("\"remove participant\" - removes a participant by ID");
		System.out.println("\"participant\" - lists results for participant with given ID");
		System.out.println("\"list participants\" - lists all participants");
		System.out.println("\"add result\" - adds a result for a participant, by ID, for a specific event, by name");
		System.out.println("\"teams\" - lists medals for all teams");
		System.out.println("$eventName - shows the result for $eventName");
		System.out.println("\"message $output\" - prints $output into console in capital letters surrounded by stars");
		System.out.println("\"reinitialize\" - clears all saved information");
		System.out.println("\"exit\" - saves info to db(if selected) and exists program");
	}
	//program functions
		//basic functions
	private void reinitialize(){
		//Reset nrOfRemoved, go through all of the ArrayLists and erase everything
		nrOfRemoved=0;
		
		eventHandler.reinitialize();
		participants.clear();
	}
	private void message(String s){
		//make new Message, start after "message "
		Message message = new Message(s.substring(8));
		message.printInBoxOfStars(MESSAGE_ABSOLUTE_NUMBER_CHARS_PER_LINE);
	}
			//public functions
	public String inputString(String outputGuideString){
		@SuppressWarnings("resource")
		Scanner tangentbord = new Scanner(System.in);
		System.out.print(outputGuideString);
		return tangentbord.nextLine();		
	}
	public Double inputNumber(String outputGuideString){		
		@SuppressWarnings("resource")
		Scanner tangentbord = new Scanner(System.in);
		System.out.print(outputGuideString);
		String dOutput = tangentbord.nextLine();
		if(isStringNumber(dOutput)){
			return Double.parseDouble(dOutput);
		}
		else{
			System.out.println(dOutput +" is not a number!");
			return Double.NaN;
		}
	}
	public boolean isStringNumber(String s){
		try{
			Double.parseDouble(s);
		}catch(Exception e){
			return false;
		}
		return true;
	}
	public String normalize(String s, int j){
		/*
		 *remove forbidden character, it will;
		 *remove leading and trailing whitespaces
		 *remove all forbidden characters
		 *leave whitespace if it has characters next to it, e.g. "Boo FF"
		 *
		 *int c;
		 *0 = do nothing
		 *1 = force capitalize
		 *2 = force all lowercase
		*/
		String str = s.trim();
		String output = null;
		
		for(int i = 0; i<str.length();i++){
			char ch = str.charAt(i);
			for(char forbiddenChar : NORMALIZE_FORBIDDEN_CHARACTERS){
				if(!(ch == forbiddenChar)){
					if(output==null){
						output=String.valueOf(ch);
					}
					else{
						output+=String.valueOf(ch);
					}
				}
				else if(ch == ' '){
					if(!(str.charAt(i+1)==' ')){
						output+=String.valueOf(ch);
					}
				}
			}
		}
		//check if we trimmed the entire thing
		if(output.isEmpty()){
			return null;
		}
		else{
			//first letter to uppercase	
			if(j == 1){
				return output.substring(0, 1).toUpperCase()+output.substring(1).toLowerCase();
			}
			//force lowercase
			else if(j == 2){
				return output.toLowerCase();
			}
			//return as is
			return output;			
		}
	}
	public ArrayList<Participant> getParticipants(){
		return participants;
	}
		//participant functions
	private void addParticipant(Competition c){
		String gName = normalize(inputString("Participants given name:"),1);
		String fName = normalize(inputString("Participants family name:"),1);
		String tName = normalize(inputString("Participants team name:"),1);
		
		if(gName != null && fName != null && tName != null){
			int ID = 100;		
			if(!participants.isEmpty()){
				ID = 1+participants.get(participants.size()-1).getID();
			}
			Participant newParticipant = new Participant(gName,fName,tName,ID,c);
			participants.add(newParticipant);
			newParticipant.addParticipantToTeam();
			System.out.println(participants.get(ID-100-nrOfRemoved)+" added");
		}
		else{
			System.out.println("Error 05; null value in add participant");
			}
	}
	private void removeParticipant(){
		double tempRemovedID = inputNumber("Participant ID to be removed:");
		if(!Double.isNaN(tempRemovedID)){
			int removedID = (int) tempRemovedID;
			int i = 0;				
			for(Participant p: participants){
				if(p.getID()==(removedID)){
					break;
				}
				i++;
			}
			if(i>=0 && i<participants.size()){
				System.out.println("Removing: "+ participants.get(i));
				Participant p = participants.get(i);
				participants.remove(i);
				p.getTeam().removeParticipant(p);
				nrOfRemoved++;
			}
			else{
				System.out.println("Error 06: No participant with ID: "+removedID);										
			}
		}
	}
	private void listParticipants(){
		for(Participant p : participants){
			System.out.println(p.toString());
		}
	}
			//public functions
	public Participant getParticipantByID(int id){
		for(Participant p : participants){
			if(p.getID() == id){
				return p;
			}
		}
		return null;
	}
	public boolean doesParticipantExist(int id){
		for(Participant p : participants){
			if(p.getID() == id){
				return true;
			}
		}
		return false;
	}
}